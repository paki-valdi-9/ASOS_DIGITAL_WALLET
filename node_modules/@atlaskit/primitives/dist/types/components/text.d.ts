/** @jsx jsx */
import { FC, ReactNode } from 'react';
import { BodyText, FontWeight, TextColor, UiText } from '../xcss/style-maps.partial';
import type { BasePrimitiveProps } from './types';
declare const asAllowlist: readonly ["span", "p", "strong", "em"];
type AsElement = (typeof asAllowlist)[number];
type TextPropsBody = {
    /**
     * Text variant
     */
    variant?: BodyText;
    /**
     * The number of lines to limit the provided text to. Text will be truncated with an ellipsis.
     *
     * When `maxLines={1}`, `wordBreak` defaults to `break-all` to match the behaviour of `text-overflow: ellipsis`.
     *
     * Only available for `body` text variants.
     */
    maxLines?: number;
};
type TextPropsUi = {
    /**
     * Text variant
     */
    variant: UiText;
    maxLines?: never;
};
type TextPropsBase = {
    /**
     * HTML tag to be rendered. Defaults to `span`.
     */
    as?: AsElement;
    /**
     * Elements rendered within the Text element
     */
    children: ReactNode;
    /**
     * Token representing text color with a built-in fallback value.
     * Will apply inverse text color automatically if placed within a Box with backgroundColor.
     *
     */
    color?: TextColor;
    /**
     * The HTML id attribute https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id
     */
    id?: string;
    /**
     * Text align https://developer.mozilla.org/en-US/docs/Web/CSS/text-align
     */
    textAlign?: TextAlign;
    /**
     * Font weight https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
     */
    weight?: FontWeight;
};
export type TextProps = TextPropsBase & Omit<BasePrimitiveProps, 'xcss'> & (TextPropsBody | TextPropsUi);
type TextAlign = keyof typeof textAlignMap;
declare const textAlignMap: {
    center: import("@emotion/react").SerializedStyles;
    end: import("@emotion/react").SerializedStyles;
    start: import("@emotion/react").SerializedStyles;
};
/**
 * __Text__
 *
 * Text is a primitive component that has the Atlassian Design System's design guidelines baked in.
 * This includes considerations for text attributes such as color, font size, font weight, and line height.
 * It renders a `span` by default.
 *
 * @internal
 */
declare const Text: FC<TextProps>;
export default Text;
