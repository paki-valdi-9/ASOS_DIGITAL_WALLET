import React from 'react';
import VisuallyHidden from '@atlaskit/visually-hidden';
import Content from '../shared/content';
import useButtonBase from '../shared/use-button-base';
/**
 * __Use icon button__
 *
 * A React hook that accepts a set of icon Button props,
 * and processes them to return consistent base props for usage
 * across IconButton and LinkIconButton variants.
 *
 * @private
 */
const useIconButton = ({
  analyticsContext,
  appearance,
  autoFocus,
  buttonType,
  icon: Icon,
  interactionName,
  isDisabled,
  isSelected,
  label,
  onClick,
  onMouseDownCapture,
  onMouseUpCapture,
  onKeyDownCapture,
  onKeyUpCapture,
  onTouchStartCapture,
  onTouchEndCapture,
  onPointerDownCapture,
  onPointerUpCapture,
  onClickCapture,
  overlay,
  ref,
  shape,
  shouldFitContainer,
  spacing,
  UNSAFE_size
}) => {
  const hasOverlay = Boolean(overlay);
  const isCircle = shape === 'circle';
  const baseProps = useButtonBase({
    analyticsContext,
    appearance,
    autoFocus,
    buttonType,
    children: /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/React.createElement(Icon, {
      label: "",
      size: UNSAFE_size
    }), /*#__PURE__*/React.createElement(VisuallyHidden, null, label)),
    interactionName,
    isDisabled,
    isSelected,
    isIconButton: true,
    isCircle,
    onClick,
    onMouseDownCapture,
    onMouseUpCapture,
    onKeyDownCapture,
    onKeyUpCapture,
    onTouchStartCapture,
    onTouchEndCapture,
    onPointerDownCapture,
    onPointerUpCapture,
    onClickCapture,
    overlay,
    ref,
    shouldFitContainer,
    spacing
  });
  return baseProps;
};
export default useIconButton;