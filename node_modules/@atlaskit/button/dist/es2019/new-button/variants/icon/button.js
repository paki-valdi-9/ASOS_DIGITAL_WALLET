import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import UNSAFE_PRESSABLE from '@atlaskit/primitives/pressable';
import useIconButton from './use-icon-button';
/**
 * __Icon Button__
 *
 * TODO: Description
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
const IconButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Button({
  analyticsContext,
  autoFocus,
  appearance,
  spacing,
  isDisabled,
  isSelected,
  icon,
  interactionName,
  label,
  overlay,
  onClick,
  onMouseDownCapture,
  onMouseUpCapture,
  onKeyDownCapture,
  onKeyUpCapture,
  onTouchStartCapture,
  onTouchEndCapture,
  onPointerDownCapture,
  onPointerUpCapture,
  onClickCapture,
  shape,
  type = 'button',
  testId,
  UNSAFE_size,
  ...rest
}, ref) {
  /**
   * TODO: At some stage I'll look into re-using more logic across 'default' and 'icon'
   * buttons. It's currently duplicated and mostly the same.
   */
  const baseProps = useIconButton({
    analyticsContext,
    appearance,
    autoFocus,
    buttonType: 'button',
    icon,
    interactionName,
    isDisabled,
    isSelected,
    label,
    onClick,
    onMouseDownCapture,
    onMouseUpCapture,
    onKeyDownCapture,
    onKeyUpCapture,
    onTouchStartCapture,
    onTouchEndCapture,
    onPointerDownCapture,
    onPointerUpCapture,
    onClickCapture,
    overlay,
    ref,
    shape,
    spacing,
    UNSAFE_size
  });
  return /*#__PURE__*/React.createElement(UNSAFE_PRESSABLE, _extends({}, rest, {
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    isDisabled: baseProps.isDisabled,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    type: type,
    testId: testId
  }), baseProps.children);
}));
IconButton.displayName = 'IconButton';
export default IconButton;