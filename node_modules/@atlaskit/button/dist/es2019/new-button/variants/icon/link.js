import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, memo } from 'react';
import UNSAFE_LINK from '@atlaskit/primitives/link';
import useIconButton from './use-icon-button';
const LinkIconButtonBase = ({
  analyticsContext,
  autoFocus,
  appearance,
  spacing,
  isDisabled,
  isSelected,
  icon,
  interactionName,
  label,
  overlay,
  onClick,
  onMouseDownCapture,
  onMouseUpCapture,
  onKeyDownCapture,
  onKeyUpCapture,
  onTouchStartCapture,
  onTouchEndCapture,
  onPointerDownCapture,
  onPointerUpCapture,
  onClickCapture,
  shape,
  testId,
  UNSAFE_size,
  href,
  ...rest
}, ref) => {
  const baseProps = useIconButton({
    analyticsContext,
    appearance,
    autoFocus,
    buttonType: 'link',
    icon,
    interactionName,
    isDisabled,
    isSelected,
    label,
    onClick,
    onMouseDownCapture,
    onMouseUpCapture,
    onKeyDownCapture,
    onKeyUpCapture,
    onTouchStartCapture,
    onTouchEndCapture,
    onPointerDownCapture,
    onPointerUpCapture,
    onClickCapture,
    overlay,
    ref,
    shape,
    spacing,
    UNSAFE_size
  });
  return /*#__PURE__*/React.createElement(UNSAFE_LINK
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , _extends({}, rest, {
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    testId: testId
    /**
     * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
     * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
     */
    // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
    ,
    href: baseProps.isDisabled ? undefined : href,
    role: baseProps.isDisabled ? 'link' : undefined,
    "aria-disabled": baseProps.isDisabled === true ? true : undefined
  }), baseProps.children);
};

// Workarounds to support generic types with forwardRef + memo
const WithRef = /*#__PURE__*/forwardRef(LinkIconButtonBase);

/**
 * __Link Icon Button__
 *
 * Renders a link in the style of an icon button.
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
const LinkIconButton = /*#__PURE__*/memo(WithRef);
export default LinkIconButton;