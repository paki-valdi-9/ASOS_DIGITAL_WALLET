import { xcss } from '@atlaskit/primitives';
import { fontSize as getFontSize } from '@atlaskit/theme/constants';
import colors from './colors';
const fontSize = getFontSize();
export const heights = {
  default: `${32 / fontSize}em`,
  compact: `${24 / fontSize}em`,
  none: 'auto'
};
const lineHeights = {
  default: heights.default,
  compact: heights.compact,
  none: 'inherit'
};
const paddingInline = {
  default: {
    default: 'space.150',
    withIcon: 'space.100'
  },
  compact: {
    default: 'space.150',
    withIcon: 'space.100'
  },
  none: {
    default: 'space.0',
    withIcon: 'space.0'
  }
};
const gap = {
  compact: 'space.050',
  default: 'space.050',
  none: 'space.0'
};
const verticalAlign = {
  default: 'middle',
  compact: 'middle',
  none: 'baseline'
};
const splitBorderStyles = {
  ':focus-visible': {
    zIndex: 1
  }
};
function getColor({
  group,
  key
}) {
  return group[key] || group.default;
}
function getColors({
  appearance,
  interactionState = 'default',
  isDisabled,
  isSelected,
  isHighlighted,
  isActiveOverSelected,
  hasOverlay
}) {
  let key = interactionState;
  // Overlay does not change color on interaction, revert to 'default' or resting state
  key = hasOverlay ? 'default' : key;
  key = isSelected || isHighlighted ? isActiveOverSelected ? 'active' : 'selected' : key;
  // Disabled colors overrule everything else
  key = isDisabled ? 'disabled' : key;
  return {
    backgroundColor: getColor({
      group: colors.background[appearance],
      key
    }),
    color: `${getColor({
      group: colors.color[appearance],
      key
    })}`
  };
}
export function getXCSS({
  appearance,
  spacing,
  isDisabled,
  isSelected,
  isHighlighted,
  isActiveOverSelected,
  isIconButton,
  isCircle,
  shouldFitContainer,
  isLink,
  isSplit,
  isNavigationSplit,
  hasOverlay,
  hasIconBefore,
  hasIconAfter
}) {
  const baseColors = getColors({
    appearance,
    isSelected,
    isHighlighted,
    isActiveOverSelected,
    isDisabled
  });
  const combinedBaseColorStyles = isLink ? {
    ...baseColors,
    textDecoration: 'none',
    // Disabling visited styles (by re-declaring the base colors)
    ':visited': baseColors
  } : isNavigationSplit && !isSelected ? {
    ...baseColors,
    backgroundColor: 'color.background.neutral.subtle'
  } : baseColors;
  const height = heights[spacing];
  let width = shouldFitContainer ? '100%' : 'auto';
  width = isIconButton ? isNavigationSplit ? '24px' : height : width;
  const defaultPaddingInlineStart = paddingInline[spacing][hasIconBefore ? 'withIcon' : 'default'];
  const defaultPaddingInlineEnd = paddingInline[spacing][hasIconAfter ? 'withIcon' : 'default'];
  const splitButtonStyles = isSplit ? splitBorderStyles : {};
  const getNavigationSplitButtonPaddings = () => {
    if (isNavigationSplit) {
      return {
        paddingInlineStart: 'space.075',
        paddingInlineEnd: 'space.075'
      };
    }
    return {
      paddingInlineStart: isIconButton ? 'space.0' : defaultPaddingInlineStart,
      paddingInlineEnd: isIconButton ? 'space.0' : defaultPaddingInlineEnd
    };
  };
  const {
    paddingInlineStart,
    paddingInlineEnd
  } = getNavigationSplitButtonPaddings();
  return xcss({
    alignItems: 'baseline',
    borderWidth: 'border.width.0',
    borderRadius: isCircle && !isSplit ? 'border.radius.circle' : 'border.radius.100',
    boxSizing: 'border-box',
    display: 'inline-flex',
    fontSize: 'inherit',
    fontStyle: 'normal',
    fontFamily: 'inherit',
    fontWeight: 500,
    maxWidth: '100%',
    // Needed to position overlay
    position: 'relative',
    textAlign: 'center',
    transition: 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)',
    whiteSpace: 'nowrap',
    height,
    lineHeight: lineHeights[spacing],
    paddingBlock: 'space.0',
    paddingInlineStart,
    paddingInlineEnd,
    columnGap: gap[spacing],
    verticalAlign: verticalAlign[spacing],
    width,
    // justifyContent required for shouldFitContainer buttons with an icon inside
    justifyContent: 'center',
    ...combinedBaseColorStyles,
    ...(isDisabled || hasOverlay ? {
      cursor: 'not-allowed'
    } : {}),
    ':hover': {
      ...getColors({
        appearance,
        isSelected: isNavigationSplit && !isSelected ? false : isSelected,
        isActiveOverSelected,
        isDisabled,
        interactionState: 'hover',
        hasOverlay
      }),
      textDecoration: !isSelected && (appearance === 'link' || appearance === 'subtle-link') ? 'underline' : 'none',
      // background, box-shadow
      transitionDuration: '0s, 0.15s'
    },
    ':active': {
      ...getColors({
        appearance,
        isSelected: isNavigationSplit && !isSelected ? false : isSelected,
        isActiveOverSelected,
        isDisabled,
        interactionState: 'active',
        hasOverlay
      }),
      // background, box-shadow
      transitionDuration: '0s, 0s'
    },
    ...splitButtonStyles
  });
}