import React, { Fragment } from 'react';
import Content from '../shared/content';
import useButtonBase from '../shared/use-button-base';
/**
 * __Use default button base__
 *
 * A React hook that accepts a set of default Button props,
 * and processes them to return consistent base props for usage
 * across Button and LinkButton variants.
 *
 * @private
 */
const useDefaultButton = ({
  analyticsContext,
  appearance,
  autoFocus,
  buttonType,
  iconBefore: IconBefore,
  UNSAFE_iconBefore_size,
  iconAfter: IconAfter,
  UNSAFE_iconAfter_size,
  interactionName,
  isDisabled,
  isSelected,
  children,
  onClick,
  onMouseDownCapture,
  onMouseUpCapture,
  onKeyDownCapture,
  onKeyUpCapture,
  onTouchStartCapture,
  onTouchEndCapture,
  onPointerDownCapture,
  onPointerUpCapture,
  onClickCapture,
  overlay,
  ref,
  shouldFitContainer,
  spacing
}) => {
  const hasOverlay = Boolean(overlay);
  const baseProps = useButtonBase({
    analyticsContext,
    appearance,
    autoFocus,
    buttonType,
    children: /*#__PURE__*/React.createElement(Fragment, null, IconBefore && /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/React.createElement(IconBefore, {
      label: "",
      size: UNSAFE_iconBefore_size
    })), children && /*#__PURE__*/React.createElement(Content, {
      hasOverlay: hasOverlay
    }, children), IconAfter && /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/React.createElement(IconAfter, {
      label: "",
      size: UNSAFE_iconAfter_size
    }))),
    interactionName,
    isDisabled,
    isSelected,
    onClick,
    onMouseDownCapture,
    onMouseUpCapture,
    onKeyDownCapture,
    onKeyUpCapture,
    onTouchStartCapture,
    onTouchEndCapture,
    onPointerDownCapture,
    onPointerUpCapture,
    onClickCapture,
    overlay,
    ref,
    shouldFitContainer,
    spacing,
    hasIconBefore: Boolean(IconBefore),
    hasIconAfter: Boolean(IconAfter)
  });
  return baseProps;
};
export default useDefaultButton;