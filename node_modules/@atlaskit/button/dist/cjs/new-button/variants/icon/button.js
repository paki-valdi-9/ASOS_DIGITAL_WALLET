"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _pressable = _interopRequireDefault(require("@atlaskit/primitives/pressable"));
var _useIconButton = _interopRequireDefault(require("./use-icon-button"));
var _excluded = ["analyticsContext", "autoFocus", "appearance", "spacing", "isDisabled", "isSelected", "icon", "interactionName", "label", "overlay", "onClick", "onMouseDownCapture", "onMouseUpCapture", "onKeyDownCapture", "onKeyUpCapture", "onTouchStartCapture", "onTouchEndCapture", "onPointerDownCapture", "onPointerUpCapture", "onClickCapture", "shape", "type", "testId", "UNSAFE_size"];
/**
 * __Icon Button__
 *
 * TODO: Description
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
var IconButton = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(function Button(_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    autoFocus = _ref.autoFocus,
    appearance = _ref.appearance,
    spacing = _ref.spacing,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    icon = _ref.icon,
    interactionName = _ref.interactionName,
    label = _ref.label,
    overlay = _ref.overlay,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    shape = _ref.shape,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'button' : _ref$type,
    testId = _ref.testId,
    UNSAFE_size = _ref.UNSAFE_size,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  /**
   * TODO: At some stage I'll look into re-using more logic across 'default' and 'icon'
   * buttons. It's currently duplicated and mostly the same.
   */
  var baseProps = (0, _useIconButton.default)({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    buttonType: 'button',
    icon: icon,
    interactionName: interactionName,
    isDisabled: isDisabled,
    isSelected: isSelected,
    label: label,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    overlay: overlay,
    ref: ref,
    shape: shape,
    spacing: spacing,
    UNSAFE_size: UNSAFE_size
  });
  return /*#__PURE__*/_react.default.createElement(_pressable.default, (0, _extends2.default)({}, rest, {
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    isDisabled: baseProps.isDisabled,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    type: type,
    testId: testId
  }), baseProps.children);
}));
IconButton.displayName = 'IconButton';
var _default = exports.default = IconButton;