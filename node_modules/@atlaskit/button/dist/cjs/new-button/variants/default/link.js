"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _link = _interopRequireDefault(require("@atlaskit/primitives/link"));
var _useDefaultButton = _interopRequireDefault(require("./use-default-button"));
var _excluded = ["analyticsContext", "autoFocus", "appearance", "spacing", "isDisabled", "isSelected", "iconBefore", "UNSAFE_iconBefore_size", "iconAfter", "UNSAFE_iconAfter_size", "children", "shouldFitContainer", "interactionName", "overlay", "onClick", "onMouseDownCapture", "onMouseUpCapture", "onKeyDownCapture", "onKeyUpCapture", "onTouchStartCapture", "onTouchEndCapture", "onPointerDownCapture", "onPointerUpCapture", "onClickCapture", "testId", "href"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var LinkButtonBase = function LinkButtonBase(_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    autoFocus = _ref.autoFocus,
    appearance = _ref.appearance,
    spacing = _ref.spacing,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    iconBefore = _ref.iconBefore,
    UNSAFE_iconBefore_size = _ref.UNSAFE_iconBefore_size,
    iconAfter = _ref.iconAfter,
    UNSAFE_iconAfter_size = _ref.UNSAFE_iconAfter_size,
    children = _ref.children,
    shouldFitContainer = _ref.shouldFitContainer,
    interactionName = _ref.interactionName,
    overlay = _ref.overlay,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    testId = _ref.testId,
    href = _ref.href,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var baseProps = (0, _useDefaultButton.default)({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    buttonType: 'link',
    children: children,
    iconBefore: iconBefore,
    UNSAFE_iconBefore_size: UNSAFE_iconBefore_size,
    iconAfter: iconAfter,
    UNSAFE_iconAfter_size: UNSAFE_iconAfter_size,
    interactionName: interactionName,
    isDisabled: isDisabled,
    isSelected: isSelected,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    overlay: overlay,
    ref: ref,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing
  });
  return /*#__PURE__*/_react.default.createElement(_link.default
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , (0, _extends2.default)({}, rest, {
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    testId: testId
    /**
     * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
     * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
     */
    // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
    ,
    href: baseProps.isDisabled ? undefined : href,
    role: baseProps.isDisabled ? 'link' : undefined,
    "aria-disabled": baseProps.isDisabled === true ? true : undefined
  }), baseProps.children);
};

// Workarounds to support generic types with forwardRef + memo
var WithRef = /*#__PURE__*/(0, _react.forwardRef)(LinkButtonBase);

/**
 * __Link Button__
 *
 * Renders a link in the style of a button.
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
var LinkButton = /*#__PURE__*/(0, _react.memo)(WithRef);
var _default = exports.default = LinkButton;