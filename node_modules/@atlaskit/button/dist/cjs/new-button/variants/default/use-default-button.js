"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _content = _interopRequireDefault(require("../shared/content"));
var _useButtonBase = _interopRequireDefault(require("../shared/use-button-base"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * __Use default button base__
 *
 * A React hook that accepts a set of default Button props,
 * and processes them to return consistent base props for usage
 * across Button and LinkButton variants.
 *
 * @private
 */
var useDefaultButton = function useDefaultButton(_ref) {
  var analyticsContext = _ref.analyticsContext,
    appearance = _ref.appearance,
    autoFocus = _ref.autoFocus,
    buttonType = _ref.buttonType,
    IconBefore = _ref.iconBefore,
    UNSAFE_iconBefore_size = _ref.UNSAFE_iconBefore_size,
    IconAfter = _ref.iconAfter,
    UNSAFE_iconAfter_size = _ref.UNSAFE_iconAfter_size,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    children = _ref.children,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    overlay = _ref.overlay,
    ref = _ref.ref,
    shouldFitContainer = _ref.shouldFitContainer,
    spacing = _ref.spacing;
  var hasOverlay = Boolean(overlay);
  var baseProps = (0, _useButtonBase.default)({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    buttonType: buttonType,
    children: /*#__PURE__*/_react.default.createElement(_react.Fragment, null, IconBefore && /*#__PURE__*/_react.default.createElement(_content.default, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/_react.default.createElement(IconBefore, {
      label: "",
      size: UNSAFE_iconBefore_size
    })), children && /*#__PURE__*/_react.default.createElement(_content.default, {
      hasOverlay: hasOverlay
    }, children), IconAfter && /*#__PURE__*/_react.default.createElement(_content.default, {
      type: "icon",
      hasOverlay: hasOverlay
    }, /*#__PURE__*/_react.default.createElement(IconAfter, {
      label: "",
      size: UNSAFE_iconAfter_size
    }))),
    interactionName: interactionName,
    isDisabled: isDisabled,
    isSelected: isSelected,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    overlay: overlay,
    ref: ref,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing,
    hasIconBefore: Boolean(IconBefore),
    hasIconAfter: Boolean(IconAfter)
  });
  return baseProps;
};
var _default = exports.default = useDefaultButton;