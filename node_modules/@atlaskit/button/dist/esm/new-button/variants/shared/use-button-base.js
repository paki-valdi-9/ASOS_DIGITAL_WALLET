import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { Fragment, useCallback, useContext, useMemo, useRef } from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import noop from '@atlaskit/ds-lib/noop';
import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';
// eslint-disable-next-line no-duplicate-imports
import InteractionContext from '@atlaskit/interaction-context';
import { Box, xcss } from '@atlaskit/primitives';
import { useSplitButtonContext } from '../../containers/split-button/split-button-context';
import blockEvents from './block-events';
import { getXCSS } from './xcss';

// Include modified onClick with analytics

var overlayStyles = xcss({
  position: 'absolute',
  insetInlineStart: 'space.0',
  insetBlockStart: 'space.0',
  insetInlineEnd: 'space.0',
  insetBlockEnd: 'space.0',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
});

/**
 * __Use button base__
 *
 * A React hook that accepts a set of common Button props,
 * and processes them to return consistent base props for usage
 * across various Button components.
 *
 * It also:
 * - Implements auto focus when enabled.
 * - Appends the `onClick` event with UFO analytics tracking.
 *
 * @private
 */
var useButtonBase = function useButtonBase(_ref) {
  var analyticsContext = _ref.analyticsContext,
    _ref$appearance = _ref.appearance,
    propAppearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    buttonType = _ref.buttonType,
    interactionName = _ref.interactionName,
    _ref$isDisabled = _ref.isDisabled,
    propIsDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$isSelected = _ref.isSelected,
    isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
    _ref$isIconButton = _ref.isIconButton,
    isIconButton = _ref$isIconButton === void 0 ? false : _ref$isIconButton,
    _ref$isCircle = _ref.isCircle,
    isCircle = _ref$isCircle === void 0 ? false : _ref$isCircle,
    _ref$hasIconBefore = _ref.hasIconBefore,
    hasIconBefore = _ref$hasIconBefore === void 0 ? false : _ref$hasIconBefore,
    _ref$hasIconAfter = _ref.hasIconAfter,
    hasIconAfter = _ref$hasIconAfter === void 0 ? false : _ref$hasIconAfter,
    children = _ref.children,
    _ref$onClick = _ref.onClick,
    providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    overlay = _ref.overlay,
    ref = _ref.ref,
    _ref$shouldFitContain = _ref.shouldFitContainer,
    shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain,
    _ref$spacing = _ref.spacing,
    propSpacing = _ref$spacing === void 0 ? 'default' : _ref$spacing;
  var ourRef = useRef();
  var splitButtonContext = useSplitButtonContext();
  var isSplitButton = Boolean(splitButtonContext);
  var isNavigationSplitButton = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isNavigationSplitButton) || false;
  var appearance = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.appearance) || propAppearance;
  var spacing = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.spacing) || propSpacing;
  var isDisabled = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isDisabled) || propIsDisabled;
  var isHighlighted = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isHighlighted) || false;
  var isActiveOverSelected = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isActiveOverSelected) || false;
  var setRef = useCallback(function (node) {
    ourRef.current = node;
    if (ref === null) {
      return;
    }
    if (typeof ref === 'function') {
      ref(node);
      return;
    }

    // @ts-ignore
    ref.current = node;
  }, [ourRef, ref]);
  useAutoFocus(ourRef, autoFocus);
  var interactionContext = useContext(InteractionContext);
  var handleClick = useCallback(function (e, analyticsEvent) {
    interactionContext && interactionContext.tracePress(interactionName, e.timeStamp);
    providedOnClick(e, analyticsEvent);
  }, [providedOnClick, interactionContext, interactionName]);
  var onClick = usePlatformLeafEventHandler({
    fn: handleClick,
    action: 'clicked',
    componentName: 'button',
    packageName: "@atlaskit/button",
    packageVersion: "17.3.2",
    analyticsData: analyticsContext,
    actionSubject: buttonType
  });
  var buttonXCSS = useMemo(function () {
    return getXCSS({
      appearance: appearance,
      spacing: spacing,
      isDisabled: isDisabled,
      isSelected: isSelected,
      isHighlighted: isHighlighted,
      isActiveOverSelected: isActiveOverSelected,
      shouldFitContainer: shouldFitContainer,
      isIconButton: isIconButton,
      isCircle: isCircle,
      hasOverlay: Boolean(overlay),
      isLink: buttonType === 'link',
      hasIconBefore: hasIconBefore,
      hasIconAfter: hasIconAfter,
      isSplit: isSplitButton,
      isNavigationSplit: isNavigationSplitButton
    });
  }, [appearance, buttonType, spacing, isDisabled, isSelected, isHighlighted, isActiveOverSelected, isIconButton, isCircle, shouldFitContainer, overlay, hasIconBefore, hasIconAfter, isSplitButton, isNavigationSplitButton]);
  var isEffectivelyDisabled = isDisabled || Boolean(overlay);
  return _objectSpread({
    ref: setRef,
    xcss: buttonXCSS,
    // Consider overlay buttons to be effectively disabled
    isDisabled: isEffectivelyDisabled,
    children: /*#__PURE__*/React.createElement(Fragment, null, children, overlay ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: overlayStyles
    }, overlay) : null)
  }, blockEvents(isEffectivelyDisabled, {
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture
  }));
};
export default useButtonBase;