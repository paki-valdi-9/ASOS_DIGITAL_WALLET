/** @jsx jsx */

import { css, jsx } from '@emotion/react';
import { heights } from '../../variants/shared/xcss';
import { SplitButtonContext } from './split-button-context';
import { getActions } from './utils';
var baseDividerStyles = css({
  display: 'inline-flex',
  width: '1px',
  position: 'relative',
  zIndex: 2
});
var defaultDividerStyles = css({
  height: heights.default
});
var compactDividerStyles = css({
  height: heights.compact
});
var dividerDisabledStyles = css({
  backgroundColor: "var(--ds-text-disabled, #091E4224)",
  cursor: 'not-allowed'
});
var navigationDividerStyles = css({
  height: '16px',
  margin: "var(--ds-space-100, 8px)".concat(" -0.5px"),
  backgroundColor: "var(--ds-text-subtle, #0052cc)",
  opacity: 0.62
});
var dividerAppearance = {
  default: css({
    backgroundColor: "var(--ds-text, #172B4D)",
    opacity: 0.51
  }),
  primary: css({
    backgroundColor: "var(--ds-text-inverse, #FFF)",
    opacity: 0.64
  }),
  navigation: navigationDividerStyles
};
var dividerHeight = {
  default: defaultDividerStyles,
  compact: compactDividerStyles
};
/**
 * TODO: Add JSDoc
 */
export var Divider = function Divider(_ref) {
  var appearance = _ref.appearance,
    spacing = _ref.spacing,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled;
  return (
    // I find it funny to provide a div for Divider
    jsx("div", {
      css: [baseDividerStyles, dividerHeight[spacing], dividerAppearance[appearance], isDisabled ? dividerDisabledStyles : undefined]
    })
  );
};
var splitButtonStyles = css({
  display: 'inline-flex',
  position: 'relative',
  alignItems: 'center',
  whiteSpace: 'nowrap'
});
var primaryButtonStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  'button,a': {
    borderEndEndRadius: 0,
    borderStartEndRadius: 0
  }
});
var secondaryButtonStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  'button,a': {
    borderEndStartRadius: 0,
    borderStartStartRadius: 0
  }
});
/**
 * TODO: Add JSdoc
 */
export var SplitButtonContainer = function SplitButtonContainer(_ref2) {
  var children = _ref2.children;
  return jsx("div", {
    css: splitButtonStyles
  }, children);
};

/**
 * __Split Button__
 *
 * A split button lets people perform an action or choose from a small group of similar actions.
 *
 * - [Examples](https://atlassian.design/components/button/split-button/examples)
 * - [Code](https://atlassian.design/components/button/split-button/code)
 * - [Usage](https://atlassian.design/components/button/split-button/usage)
 */
export var SplitButton = function SplitButton(_ref3) {
  var children = _ref3.children,
    _ref3$appearance = _ref3.appearance,
    appearance = _ref3$appearance === void 0 ? 'default' : _ref3$appearance,
    _ref3$spacing = _ref3.spacing,
    spacing = _ref3$spacing === void 0 ? 'default' : _ref3$spacing,
    _ref3$isDisabled = _ref3.isDisabled,
    isDisabled = _ref3$isDisabled === void 0 ? false : _ref3$isDisabled;
  var _getActions = getActions(children),
    PrimaryAction = _getActions.PrimaryAction,
    SecondaryAction = _getActions.SecondaryAction;
  return jsx(SplitButtonContainer, null, jsx(SplitButtonContext.Provider, {
    value: {
      appearance: appearance,
      spacing: spacing,
      isDisabled: isDisabled
    }
  }, jsx("div", {
    css: primaryButtonStyles
  }, PrimaryAction), jsx(Divider, {
    appearance: appearance,
    spacing: spacing,
    isDisabled: isDisabled
  }), jsx("div", {
    css: secondaryButtonStyles
  }, SecondaryAction)));
};
/**
 * TODO: Decide on API
 */
export var SplitButtonWithSlots = function SplitButtonWithSlots(_ref4) {
  var primaryAction = _ref4.primaryAction,
    secondaryAction = _ref4.secondaryAction,
    _ref4$appearance = _ref4.appearance,
    appearance = _ref4$appearance === void 0 ? 'default' : _ref4$appearance,
    _ref4$spacing = _ref4.spacing,
    spacing = _ref4$spacing === void 0 ? 'default' : _ref4$spacing,
    _ref4$isDisabled = _ref4.isDisabled,
    isDisabled = _ref4$isDisabled === void 0 ? false : _ref4$isDisabled;
  return jsx(SplitButtonContainer, null, jsx(SplitButtonContext.Provider, {
    value: {
      appearance: appearance,
      spacing: spacing,
      isDisabled: isDisabled
    }
  }, jsx("div", {
    css: primaryButtonStyles
  }, primaryAction), jsx(Divider, {
    appearance: appearance,
    spacing: spacing,
    isDisabled: isDisabled
  }), jsx("div", {
    css: secondaryButtonStyles
  }, secondaryAction)));
};