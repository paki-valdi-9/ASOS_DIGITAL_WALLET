import React from 'react';
import { UIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type IconProps } from '@atlaskit/icon/types';
export type ButtonAppearance = 'default' | 'danger' | 'primary' | 'subtle' | 'warning';
export type LinkButtonAppearance = 'default' | 'danger' | 'link' | 'primary' | 'subtle' | 'subtle-link' | 'warning';
export type IconButtonAppearance = 'default' | 'primary' | 'subtle';
export type Appearance = ButtonAppearance | LinkButtonAppearance | IconButtonAppearance;
export type Spacing = 'compact' | 'default' | 'none';
export type IconProp = React.ComponentType<IconProps>;
export type IconSize = 'small' | 'large' | 'xlarge';
type Combine<First, Second> = Omit<First, keyof Second> & Second;
export type CommonButtonProps<TagName extends HTMLElement> = {
    /**
     * Set the button to autofocus on mount.
     */
    autoFocus?: boolean;
    /**
     * Used to 'overlay' something over a button. This is commonly used to display a loading spinner.
     */
    overlay?: React.ReactNode;
    /**
     * Disable the button to prevent user interaction.
     */
    isDisabled?: boolean;
    /**
     * Indicates that the button is selected.
     */
    isSelected?: boolean;
    /**
     * Handler to be called on blur.
     */
    onBlur?: React.FocusEventHandler<TagName>;
    /**
     * Handler to be called on click. The second argument can be used to track analytics data. See the tutorial in the analytics-next package for details.
     */
    onClick?: (e: React.MouseEvent<TagName>, analyticsEvent: UIAnalyticsEvent) => void;
    /**
     * Handler to be called on focus.
     */
    onFocus?: React.FocusEventHandler<TagName>;
    /**
     * Controls the amount of padding in the button.
     */
    spacing?: Spacing;
    /**
     * A unique string that appears as data attribute `data-testid` in the rendered code, serving as a hook for automated tests.
     */
    testId?: string;
    /**
     * An optional name used to identify this component to press listeners. For example, interaction tracing. For more information,
     * see [UFO integration into Design System components](https://go.atlassian.com/react-ufo-dst-integration).
     */
    interactionName?: string;
    /**
     * Additional information to be included in the `context` of analytics events that come from button.
     */
    analyticsContext?: Record<string, any>;
};
export type SupportedElements = HTMLButtonElement | HTMLAnchorElement;
type SupportedElementAttributes = React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;
export type AdditionalHTMLElementPropsExtender<Props extends SupportedElementAttributes> = Combine<Omit<Props, 'className' | 'style' | 'role' | 'disabled'>, {
    'data-testid'?: never;
}>;
/**
 * Common additional props for button `<button>` variants
 */
export type AdditionalButtonVariantProps = {
    /**
     * The button style variation.
     */
    appearance?: ButtonAppearance;
};
/**
 * Combines common button props with additional HTML attributes
 */
export type CombinedButtonProps<TagName extends HTMLElement, HTMLAttributes extends SupportedElementAttributes> = Combine<HTMLAttributes, CommonButtonProps<TagName>>;
/**
 * Common props for Button `<button>` variants
 */
export type CommonButtonVariantProps = AdditionalButtonVariantProps & CombinedButtonProps<HTMLButtonElement, AdditionalHTMLElementPropsExtender<Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children'>>>;
/**
 * Common additional props for Link `<a>` Button variants, including icon and default buttons
 */
export type AdditionalCommonLinkVariantProps<RouterLinkConfig extends Record<string, any> = never> = {
    /**
     * Provides a URL for link buttons. When using an AppProvider with a configured router link component, a `RouterLinkConfig` object type can be provided for advanced usage. See the [Link Button routing example](/components/button/button-new/examples#routing) for more details.
     */
    href: string | RouterLinkConfig;
};
/**
 * Additional props for default Link `<a>` Button variants
 */
export type AdditionalDefaultLinkVariantProps = {
    /**
     * The button style variation.
     */
    appearance?: LinkButtonAppearance;
};
/**
 * Common props for Link `<a>` Button variants
 */
export type CommonLinkVariantProps<RouterLinkConfig extends Record<string, any> = never> = AdditionalCommonLinkVariantProps<RouterLinkConfig> & CombinedButtonProps<HTMLAnchorElement, AdditionalHTMLElementPropsExtender<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href' | 'children'>>>;
export {};
