import React from 'react';
import { xcss } from '@atlaskit/primitives';
import { type Appearance, type CommonButtonProps } from '../types';
export type ControlledEvents<TagName extends HTMLElement> = Pick<React.DOMAttributes<TagName>, 'onMouseDownCapture' | 'onMouseUpCapture' | 'onKeyDownCapture' | 'onKeyUpCapture' | 'onTouchStartCapture' | 'onTouchEndCapture' | 'onPointerDownCapture' | 'onPointerUpCapture' | 'onClickCapture' | 'onClick'>;
export type ControlledEventsPassed<TagName extends HTMLElement> = Omit<ControlledEvents<TagName>, 'onClick'> & Pick<CommonButtonProps<TagName>, 'onClick'>;
export type UseButtonBaseArgs<TagName extends HTMLElement> = {
    ref: React.Ref<TagName>;
    /**
     * The type of button. Used to pass action subject context to analytics.
     */
    buttonType: 'button' | 'link';
    isIconButton?: boolean;
    isCircle?: boolean;
    hasIconBefore?: boolean;
    hasIconAfter?: boolean;
    shouldFitContainer?: boolean;
    appearance?: Appearance;
    children: React.ReactNode;
} & Pick<CommonButtonProps<TagName>, 'analyticsContext' | 'autoFocus' | 'interactionName' | 'isDisabled' | 'isSelected' | 'overlay' | 'spacing'> & ControlledEventsPassed<TagName>;
export type UseButtonBaseReturn<TagName extends HTMLElement> = {
    xcss: ReturnType<typeof xcss>;
    ref(node: TagName | null): void;
    children: React.ReactNode;
    isDisabled: boolean;
} & ControlledEvents<TagName>;
/**
 * __Use button base__
 *
 * A React hook that accepts a set of common Button props,
 * and processes them to return consistent base props for usage
 * across various Button components.
 *
 * It also:
 * - Implements auto focus when enabled.
 * - Appends the `onClick` event with UFO analytics tracking.
 *
 * @private
 */
declare const useButtonBase: <TagName extends HTMLElement>({ analyticsContext, appearance: propAppearance, autoFocus, buttonType, interactionName, isDisabled: propIsDisabled, isSelected, isIconButton, isCircle, hasIconBefore, hasIconAfter, children, onClick: providedOnClick, onMouseDownCapture, onMouseUpCapture, onKeyDownCapture, onKeyUpCapture, onTouchStartCapture, onTouchEndCapture, onPointerDownCapture, onPointerUpCapture, onClickCapture, overlay, ref, shouldFitContainer, spacing: propSpacing, }: UseButtonBaseArgs<TagName>) => UseButtonBaseReturn<TagName>;
export default useButtonBase;
